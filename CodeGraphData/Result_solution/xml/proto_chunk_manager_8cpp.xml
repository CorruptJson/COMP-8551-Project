<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="proto_chunk_manager_8cpp" kind="file">
    <compoundname>protoChunkManager.cpp</compoundname>
    <includes refid="proto_chunk_manager_8h" local="yes">protoChunkManager.h</includes>
    <incdepgraph>
      <node id="837">
        <label>chunk.h</label>
        <link refid="chunk_8h"/>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
      </node>
      <node id="834">
        <label>Types.h</label>
        <link refid="_types_8h"/>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
      </node>
      <node id="836">
        <label>string</label>
      </node>
      <node id="840">
        <label>Archetype.h</label>
        <link refid="_archetype_8h"/>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>exception</label>
      </node>
      <node id="839">
        <label>sigArch.h</label>
        <link refid="_sig_arch_8h"/>
      </node>
      <node id="843">
        <label>any</label>
      </node>
      <node id="835">
        <label>bitset</label>
      </node>
      <node id="828">
        <label>protoChunkManager.h</label>
        <link refid="proto_chunk_manager_8h"/>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
      </node>
      <node id="833">
        <label>vector</label>
      </node>
      <node id="830">
        <label>iostream</label>
      </node>
      <node id="827">
        <label>C:/Users/Thompson/COMP-8551-Project/protoChunkManager.cpp</label>
        <link refid="protoChunkManager.cpp"/>
        <childnode refid="828" relation="include">
        </childnode>
      </node>
      <node id="832">
        <label>unordered_map</label>
      </node>
      <node id="829">
        <label>chunkManager.h</label>
        <link refid="chunk_manager_8h"/>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="841">
        <label>algorithm</label>
      </node>
      <node id="842">
        <label>ComponentManager.h</label>
        <link refid="_component_manager_8h"/>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
      </node>
      <node id="838">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="proto_chunk_manager_8h" kindref="compound">protoChunkManager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finds<sp/>an<sp/>index<sp/>for<sp/>a<sp/>new<sp/>entity,<sp/>creates<sp/>a<sp/>new<sp/>ChunkAddress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="class_proto_chunk_manager_1a365524e5fe5de1f67a3bc8ef18fcc9f9" refkind="member"><highlight class="normal"><ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/><ref refid="class_proto_chunk_manager_1a365524e5fe5de1f67a3bc8ef18fcc9f9" kindref="member">ProtoChunkManager::allocateNewEntity</ref>(<ref refid="struct_sig_arch" kindref="compound">SigArch</ref><sp/>sa)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[i]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>{<sp/>0,i,0<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>{<sp/>0,<ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.size(),0<sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.push_back(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1a840386f37357cac0a1e8961dc529fda0" kindref="member">positions</ref>.push_back(TempPosition());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finds<sp/>an<sp/>index<sp/>for<sp/>a<sp/>new<sp/>entity,<sp/>creates<sp/>a<sp/>new<sp/>ChunkAddress,<sp/>and<sp/>sets<sp/>the<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_proto_chunk_manager_1ad531efa40d5205fce4e30e647dbb73ef" refkind="member"><highlight class="normal"><ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/><ref refid="class_proto_chunk_manager_1a365524e5fe5de1f67a3bc8ef18fcc9f9" kindref="member">ProtoChunkManager::allocateNewEntity</ref>(<ref refid="struct_sig_arch" kindref="compound">SigArch</ref><sp/>sa,<sp/>TempPosition<sp/>pos)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_proto_chunk_manager_1a365524e5fe5de1f67a3bc8ef18fcc9f9" kindref="member">allocateNewEntity</ref>(sa);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1a63e1241620bfbe3ffe89f843857ef010" kindref="member">setEntityPosition</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>pos);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>entity<sp/>index<sp/>as<sp/>inactive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_proto_chunk_manager_1a25d0a9ae964f6240f70e2f2cb101162e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_proto_chunk_manager_1a25d0a9ae964f6240f70e2f2cb101162e" kindref="member">ProtoChunkManager::deallocateEntity</ref>(<ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&gt;=<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.size()<sp/>||<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>to<sp/>deallocate<sp/>entity<sp/>that<sp/>does<sp/>not<sp/>exist,<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>position<sp/>of<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_proto_chunk_manager_1a63e1241620bfbe3ffe89f843857ef010" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_proto_chunk_manager_1a63e1241620bfbe3ffe89f843857ef010" kindref="member">ProtoChunkManager::setEntityPosition</ref>(<ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>TempPosition<sp/>pos)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&gt;=<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.size()<sp/>||<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>to<sp/>set<sp/>possition<sp/>for<sp/>entity<sp/>that<sp/>does<sp/>not<sp/>exist,<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_proto_chunk_manager_1a840386f37357cac0a1e8961dc529fda0" kindref="member">positions</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index]<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>position<sp/>of<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_proto_chunk_manager_1a6a701d1fe2bc54e5c37ee0f6f9afe750" refkind="member"><highlight class="normal">TempPosition<sp/><ref refid="class_proto_chunk_manager_1a6a701d1fe2bc54e5c37ee0f6f9afe750" kindref="member">ProtoChunkManager::getEntityPosition</ref>(<ref refid="struct_chunk_address" kindref="compound">ChunkAddress</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&gt;=<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>.size()<sp/>||<sp/><ref refid="class_proto_chunk_manager_1ad164d2a0b4440536734ebf6e0196a1a8" kindref="member">active</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>to<sp/>access<sp/>possition<sp/>for<sp/>entity<sp/>that<sp/>does<sp/>not<sp/>exist,<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempPosition<sp/>p<sp/>=<sp/>{<sp/>-1,-1<sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_proto_chunk_manager_1a840386f37357cac0a1e8961dc529fda0" kindref="member">positions</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.index];</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Thompson/COMP-8551-Project/protoChunkManager.cpp"/>
  </compounddef>
</doxygen>
